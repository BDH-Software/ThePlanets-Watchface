/*************************************************************
*
* Adapted directly from:
* SolarSystem by Ioannis Nasios 
* https://github.com/IoannisNasios/solarsystem
*
* LICENSE & COPYRIGHT of original code:
* The MIT License, Copyright (c) 2020, Ioannis Nasios
*
* Monkey C/Garmin IQ version of the code, with many modifications,
* Copyright (c) 2024, Brent Hugh. Released under the MIT license.
*
***************************************************************/

using Toybox.Math;
using Toybox.System;
import Toybox.Lang; 

//from .functions import normalize

class sunRiseSet_cache{

    var g_cache;
    var indexes;
    var MAX_CACHE = 0;

    function initialize () {
        

        //planetoncenter = $.Geocentric.planetoncenter;
        //objectlist = $.Geocentric.objectlist;
        g_cache = {};
        indexes = [];
    }

    function fetch (year, month, day, UT, dst, timeAdd_hrs, 
                 lat, lon) {

        //changing lat or lon by 1 degree equal about 4 mins difference in sunrise/set
        //so for our purposes +/- 4 mins or 6 mins is not really perceptible on screen.
         var lon_index = (lon/3.0).toNumber();
         var lat_index = (lat/3.0).toNumber();
                    
        //since we must incl lat & lon to get a sensible answer, might as well
        //includ UT & dst as well, as those are localized in the same way                    
        //var index = year+"|"+month+"|"+day+"|"+ UT+dst +"|"+lat_index+"|"+ lon_index;

        var time_mod = Math.round(0.0 + timeAdd_hrs/24.0 + julianDate(year, 
            month, day, 0, 0, UT, dst)).toNumber();
        var index = time_mod + "|"+ +"|"+lat_index+"|"+ lon_index;
        var ret;

        var myStats = System.getSystemStats();

        //System.println("Memory/sunriseset: " + myStats.totalMemory + " " + myStats.usedMemory + " " + myStats.freeMemory + " MAX_CACHE: " + MAX_CACHE);
        //myStats = null;

        if (g_cache.hasKey(index)) {
            ret = g_cache[index];
            //kys = ret.keys();
            } 
        else {
            //we always cache the info for midnight UTC & all objects
            
            if (myStats.freeMemory<5500) {
                MAX_CACHE = 0;
                self.empty();                                 
            
            } else if (myStats.freeMemory<9500) {
                MAX_CACHE -=1;
                if (MAX_CACHE < 0) { MAX_CACHE = 0; }
                if (indexes.size() > MAX_CACHE -1 && indexes.size() > 0) {
                    g_cache.remove(indexes[0]);
                    indexes.remove(indexes[0]);
                }
            }
            else if (myStats.freeMemory> 20000 && MAX_CACHE<60) {MAX_CACHE +=1;}

            if (indexes.size() > MAX_CACHE -1 && g_cache.size()>0) {
                g_cache.remove(indexes[0]);
                indexes.remove(indexes[0]);
            }
            var g = new sunRiseSet(year, month, day, UT,dst, timeAdd_hrs, lat, lon);
            ret = g.riseSet();
            //kys = ret.keys();
            g_cache.put(index,ret);
            indexes.add(index);
        }                    

        return ret;
    }

    public function empty () {
        
        g_cache = {};
        indexes = [];
    }
    
}


    /*enum {
        ASTRO_DAWN,
        NAUTIC_DAWN,
        DAWN,
        BLUE_HOUR_AM,
        SUNRISE,
        SUNRISE_END,
        GOLDEN_HOUR_AM,
        NOON,
        GOLDEN_HOUR_PM,
        SUNSET_START,
        SUNSET,
        BLUE_HOUR_PM,
        DUSK,
        NAUTIC_DUSK,
        ASTRO_DUSK,
        NUM_RESULTS,
        SIDEREAL_TIME
    } */

class sunRiseSet{

    /* public var sunEvents = [
        ASTRO_DAWN,
        NAUTIC_DAWN,
        DAWN,
        BLUE_HOUR_AM,
        SUNRISE,
        SUNRISE_END,
        GOLDEN_HOUR_AM,
        NOON,
        GOLDEN_HOUR_PM,
        SUNSET_START,
        SUNSET,
        BLUE_HOUR_PM,
        DUSK,
        NAUTIC_DUSK,
        ASTRO_DUSK,
        SIDEREAL_TIME
    ];*/

    /*
    public var sunEventData = {
        ASTRO_DAWN => [-18,  "Astronomical Dawn"],
        NAUTIC_DAWN => [-12, "Nautical Dawn"],
        DAWN => [-6 , "Civil Dawn"],
        BLUE_HOUR_AM => [-4, "Morning Blue Hour"],
        SUNRISE => [-.833, "Sunrise"],
        SUNRISE_END => [-.3, "End of Sunrise"],
        GOLDEN_HOUR_AM => [6, "Morning Golden Hour"],
        NOON => [null, "Noon"], //noon is the highest point or whatever, but not a certain # of degrees
        GOLDEN_HOUR_PM => [6, "Evening Golden Hour"],
        SUNSET_START => [-0.3, "Start of Sunset"],
        SUNSET => [-.833,  "Sunset"],
        BLUE_HOUR_PM => [-4,  "Evening Blue HOur"],
        DUSK => [-6,  "Civil Dusk"],
        NAUTIC_DUSK => [-12,  "Nautical Dusk"],
        ASTRO_DUSK  => [-18,  "Astronomical Dusk"], 
        SIDEREAL_TIME => [null, "Sidereal Time"],
    };
    */

        public var sunEventData = {
        :ASTRO_DAWN => [-18, :AM],
        :NAUTIC_DAWN => [-12, :AM],
        :DAWN => [-6, :AM ],
        :BLUE_HOUR_AM => [-4, :AM],
        :SUNRISE => [-.833, :AM],
        :SUNRISE_END => [-.3, :AM],
        :HORIZON_AM => [0, :AM],
        :GOLDEN_HOUR_AM => [6, :AM],
        :NOON => [null, :PM], //noon is the highest point or whatever, but not a certain # of degrees
        :GOLDEN_HOUR_PM => [6, :PM],
        :HORIZON_PM => [0, :PM],
        :SUNSET_START => [-0.3, :PM],
        :SUNSET => [-.833, :PM],
        :BLUE_HOUR_PM => [-4, :PM],
        :DUSK => [-6, :PM],
        :NAUTIC_DUSK => [-12, :PM],
        :ASTRO_DUSK  => [-18, :PM], 
        :SIDEREAL_TIME => [null, :PM],
    };
        
        //degrees above / below the horizon for these events
        /*
    public const TIMES = [
        -18,    // ASTRO_DAWN
        -12,    // NAUTIC_DAWN
        -6,     // DAWN
        -4,     // BLUE_HOUR
        -0.833, // SUNRISE
        -0.3,   // SUNRISE_END
        6,      // GOLDEN_HOUR_AM
        null,         // NOON
        6 ,
        -0.3,
        -0.833,
        -4,
        -6,
        -12,
        -18,
        ];
        */

    /* **************************************************************************
    Outputs Dictionary with all sun events for the day + Sidereal_Time EVENT_NAME => [time, name_str].  See enum with EVENT_NAMEs above.
    If any events do not happen (ie sunrise & set during polar summer) their time will be a null.
    
    Args:
        year (int): Year (4 digits) ex. 2020.
        month (int): Month (1-12).
        day (int): Day (1-31).
        UT: Time Zone (deviation from UT, -12:+14), ex. for Greece (GMT + 2) 
            enter UT = 2.
        dst (int): daylight saving time (0 or 1). Wheather dst is applied at 
                   given time and place.
        longitude (float): longitude of place of Sunrise - Sunset in decimal format.
        latitude (float): latitude of place of Sunrise - Sunset in decimal format.
    ***************************************************************************/
    
    var UT, dst, longitude, latitude, d, oblecl;

    function initialize(year, month, day, UT1, dst1, timeAdd_hrs,
                 latitude1, longitude1) {
        UT =  UT1;
        dst = dst1;
        longitude = longitude1;
        latitude = latitude1;
        var pr=0;
        if (dst==1) {pr=1/24f;}
        var JDN= ((367l*(year) - Math.floor(7*(year + Math.floor((month+9 )/12))/4)) + Math.floor(275*(month)/9) + (day + 1721013.5 - UT/24f ) );
        var JD1= (JDN + (12)/24f + 0/1440f - pr); //(hour)/24 + (min)/1440; in this case  noon (hr12, min0)
        var JD = JD1 + timeAdd_hrs /24.0f;
        var j2000= 2451543.5;
        d = JD - j2000;
        //self.d = d;
        oblecl=23.4393 - 3.563E-7 * d; //obliquity of the ecliptic, i.e. the "tilt" of the Earth's axis of rotation (currently 23.4 degrees and slowly decreasing)
        oblecl= Math.toRadians(oblecl);
        //self.oblecl = oblecl ;
    }
        

    function riseSet() {
        /*Get the time of sun rise and set within given date.
        
        Returns:
            tuple: Sunrise - Sunset time of given date
            
        */
        
        //Sun's trajectory elements
        var w=282.9404 + 4.70935E-5 * d      ;
        var e=(0.016709 - (1.151E-9  * d))   ;
        var M=356.047 + 0.9856002585 * d   ;
        M=normalize(M);
        var L=w+M   ;
        L=normalize(L);

        var M2=M;
        M=Math.toRadians(M);
        var E=M2 + (180/Math.PI)*e*Math.sin(M)*(1+e*Math.cos(M));
        E=Math.toRadians(E);
        var x=Math.cos(E)-e;
        var y=Math.sin(E)*Math.sqrt(1-e*e);
        
        var r=Math.sqrt(x*x + y*y) ;
        var v=Math.atan2(y,x)  ;
        v=Math.toDegrees(v);
        var lon=(v+w)   ;
        lon=normalize((lon));
        lon=Math.toRadians(lon) ;
        var x2=r * Math.cos(lon) ;
        var y2=r * Math.sin(lon);
        var z2=0;
        
        var xequat = x2   ;
        var yequat = (y2*Math.cos(oblecl) - z2 * Math.sin(oblecl));
        var zequat = (y2*Math.sin(oblecl) + z2 * Math.cos(oblecl));

    
        var RA=Math.atan2(yequat, xequat);
        RA=Math.toDegrees(RA);
        RA=normalize(RA);
        var Decl=Math.atan2(zequat, Math.sqrt(xequat*xequat +yequat*yequat));
        //Decl=Math.toDegrees(Decl); //can't transform to degrees yet...
        //RA2=RA/15;

        System.println("Ioannis RA (rad) " + normalize(Math.toDegrees(RA)) + " DECL " + normalize(Math.toDegrees(Decl)));
        
        var gmsto=L/15.0 + 12.0;
        
        var sidtime=(-dst + gmsto - UT + longitude/15);

        
        var HA=(sidtime*15 - RA); //gonia oras; = time angle
        HA=Math.toRadians(HA);
        //Decl=Math.toRadians(Decl);
        
        var x3=Math.cos(HA)*Math.cos(Decl);
        var y3=Math.sin(HA)*Math.cos(Decl);
        var z3=Math.sin(Decl);

        //System.println("RA " + RA + " DECL " + Decl + " HA " + HA + "gmsto " + gmsto + " sidtime " + sidtime + " x3 " + x3 + "y3 " + y3 + " z3 " + z3);
        
        latitude=Math.toRadians(latitude);
        var xhor=(x3*Math.sin(latitude) - z3*Math.cos(latitude));
        var yhor=y3;
        var zhor=(x3*Math.cos(latitude) + z3*Math.sin(latitude));
        var azim=Math.atan2(yhor, xhor) ;
        azim=Math.toDegrees(azim);
        //  azimuth=azim + 180 ;
        var altitude=Math.asin(zhor);
        altitude=Math.toDegrees(altitude);
        
        var ret = {};
        var kys = sunEventData.keys();        

        for (var i = 0; i<sunEventData.size();i++) {
            var ky = kys[i];

            var T_sun=normalize((RA - sidtime*15))/15 ;
            if (ky == :NOON) {
                //ret.put (ky, [T_sun,sunEventData[ky][1]]);
                ret.put (ky, [T_sun.toFloat()]);                
                continue;
            } else if (ky == :SIDEREAL_TIME) {
                //ret.put (ky, [sidtime ,sunEventData[ky][1]]);
                ret.put (ky, [sidtime.toFloat()]);
                continue;
            }

            //var h=Math.toRadians(-.833); //but this is clearly in radians not degrees...
            var h=Math.toRadians(sunEventData[ky][0]); //but this is clearly in radians not degrees...
            var adi=(Math.sin(h) -Math.sin(latitude)*Math.sin(Decl))/(Math.cos(latitude)*Math.cos(Decl));

            //System.println("h " + h + " latitude " + latitude +  " Decl rad. " + Decl + "adi " + adi);
            //In polar regions etc we might not have sunrise, sunset etc
            var Lha = (adi>1 || adi < -1) ? null : Math.acos(adi);

            //var Lha=Math.acos(adi);
            if (Lha != null) { Lha= (Math.toDegrees(Lha))/15;}
            //Decl=Math.toDegrees(Decl); 
            //System.println("LHa " + Lha + " Tsun " + T_sun + " adi " + adi + " Decl deg. " + Decl);

            if (sunEventData[ky][1] == :AM) {
                var anatoli=null;
                if (Lha != null) {anatoli=T_sun - Lha;}
                //ret.put (ky, [anatoli ,sunEventData[ky][1]]);
                ret.put (ky, [anatoli.toFloat()]);
            } else {
                var disi=null;
                if (Lha != null) {disi=T_sun + Lha;}                
                //ret.put (ky, [disi ,sunEventData[ky][1]]);
                ret.put (ky, [disi.toFloat()]);
            }
            //var ret = [anatoli, disi];
            
        }
        //System.println("sunrise/sets " + ret);

        return ret;
    }

/*
    public function siderealTime(year, month, day, hour, min, UT1, dst1, 
                 latitude1, longitude1){

 
        var UT =  UT1;
        var dst = dst1;
        var longitude = longitude1;
        //var latitude = latitude1;
        var pr=0;
        if (dst==1) {pr=1/24f;}
        var JDN= ((367l*(year) - Math.floor(7*(year + Math.floor((month+9 )/12))/4)) + Math.floor(275*(month)/9) + (day + 1721013.5 - UT/24f ) );
        var JD= (JDN + (hour)/24f + min/1440f - pr); //(hour)/24 + (min)/1440; in this case  noon (hr12, min0)
        var j2000= 2451543.5;
        var d = JD - j2000;
        //self.d = d;
        var oblecl=23.4393 - 3.563E-7 * d;
        oblecl= Math.toRadians(oblecl);
        //self.oblecl = oblecl ;
        
        //Sun's trajectory elements
        var w=282.9404 + 4.70935E-5 * d      ;
        var e=(0.016709 - (1.151E-9  * d))   ;
        var M=356.047 + 0.9856002585 * d   ;
        M=normalize(M);
        var L=w+M   ;
        L=normalize(L);

        var M2=M;
        M=Math.toRadians(M);
        var E=M2 + (180/Math.PI)*e*Math.sin(M)*(1+e*Math.cos(M));
        E=Math.toRadians(E);
        var x=Math.cos(E)-e;
        var y=Math.sin(E)*Math.sqrt(1-e*e);
        
        var r=Math.sqrt(x*x + y*y) ;
        var v=Math.atan2(y,x)  ;
        v=Math.toDegrees(v);
        var lon=(v+w)   ;
        lon=normalize((lon));
        lon=Math.toRadians(lon) ;
        var x2=r * Math.cos(lon) ;
        var y2=r * Math.sin(lon);
        var z2=0;
        
        var xequat = x2   ;
        var yequat = (y2*Math.cos(oblecl) - z2 * Math.sin(oblecl));
        //var zequat = (y2*Math.sin(oblecl) + z2 * Math.cos(oblecl));

    
        var RA=Math.atan2(yequat, xequat);
        RA=Math.toDegrees(RA);
        RA=normalize(RA);
        //var Decl=Math.atan2(zequat, Math.sqrt(xequat*xequat +yequat*yequat));
        //Decl=Math.toDegrees(Decl); //can't transform to degrees yet...
        //RA2=RA/15;
        
        var gmsto=L/15.0 + 12.0;
        
        var sidtime=(-dst + gmsto - UT + longitude/15);

        return sidtime;


    }
    */
}