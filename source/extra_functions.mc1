class extra_functions {
    
    function spherical2rectangular(RA, Decl, r) {
        /*Transform spherical to rectangular projection.
        
        From spherical (RA,Decl) coordinates system to rectangular(x,y,z) or 
        by replacing RA with longitude and Decl with latitude we can tranform 
        ecliptic coordinates to horizontal (azimuth,altitude).
        
        Args:
            RA: Right Ascension.
            Decl: Declination.
            r: Distance in astronomical units.
    
        Returns:
            tuple: x, y, z rectangular coordinate system. 
            
        */
        
        RA = Math.toRadians(RA);
        Decl = Math.toRadians(Decl);
        var x = r * Math.cos(RA) * Math.cos(Decl);
        var y = r * Math.sin(RA) * Math.cos(Decl);
        var z = r * Math.sin(Decl);
        
        return [x, y, z];


    }


   


    function ecliptic2equatorial(xeclip, yeclip, zeclip, oblecl) {
        /*Transform ecliptic to equatorial projection.
        
        Args:
            xeclip: value on x axis of ecliptic plane.
            yeclip: value on y axis of ecliptic plane.
            zeclip: value on z axis of ecliptic plane.
            oblecl: obliquity of the ecliptic, approximately 23.4 degrees for earth
    
        Returns:
            tuple: x, y, z equatorial projection 
            
        */
        //    oblecl = Math.toRadians(oblecl);

        //System.println("oblecl: " + oblecl  + " yeclip: " + yeclip);
        
        var xequat = xeclip;
        var yequat = yeclip * Math.cos(oblecl) - zeclip * Math.sin(oblecl);
        var zequat = yeclip * Math.sin(oblecl) + zeclip * Math.cos(oblecl);
        
        return [xequat, yequat, zequat];

    }



    function equatorial2ecliptic(xequat, yequat, zequat, oblecl) {
        /*Transform equatorial to ecliptic projection.
        
        Args:
            xequat: value on x axis of equatorial plane
            yequat: value on y axis of equatorial plane
            zequat: value on z axis of equatorial plane
            oblecl: obliquity of the ecliptic, approximately 23.4 degrees for earth
    
        Returns:
            tuple: x, y, z ecliptic projection 
            
        */
        
        //    oblecl = Math.toRadians(oblecl);
        var xeclip = xequat;
        var yeclip = yequat * Math.cos(-oblecl) - zequat * Math.sin(-oblecl);
        var zeclip = yequat * Math.sin(-oblecl) + zequat * Math.cos(-oblecl);
        return [xeclip, yeclip, zeclip];

    }

    


    function spherical_ecliptic2equatorial(long, lat, distance, oblecl) {
        /*Transform eclipitc to spherical projection for given obliquity.
        
        From spherical (RA, Decl, distance) coordinates system to 
        eclipitc(long, lat, distance).
        
        Args:
            long: Longitude.
            last: Latitude.
            distance: Distance in astronomical units.
            oblecl: obliquity (axial tilt).
                
        Returns:
            tuple: RA, Decl, distance spherical coordinate system. 
            
        */
        
        var b = spherical2rectangular(long,lat,distance);
        var c = ecliptic2equatorial(b[0],b[1],b[2], oblecl);
        return rectangular2spherical(c[0],c[1],c[2]);
    }


    function spherical_equatorial2ecliptic(RA, Decl, distance, oblecl) {
        /*Transform spherical to eclipitc projection for given obliquity.
        
        From spherical (RA, Decl, distance) coordinates system to 
        eclipitc(long, lat, distance).
        
        Args:
            RA: Right Ascension.
            Decl: Declination.
            distance: Distance in astronomical units.
            oblecl: obliquity (axial tilt).
                
        Returns:
            tuple: long, lat, distance eclipitc coordinate system. 
            
        */
        
        var b = spherical2rectangular(RA, Decl,distance);
        var c = equatorial2ecliptic(b[0],b[1],b[2], oblecl);
        return rectangular2spherical(c[0],c[1],c[2]);

    }


    function decimal2clock(decimaltime) {
        /*
        Convert demical time view to Hours, Minutes and Seconds.
        
        Args:
            decimaltime (float): time to be converted.
            
        Returns:
            str: one string representation in hours, minutes format.
            
        */
        var h  = (decimaltime>=0) ? (Math.floor(decimaltime)) : (Math.ceil(decimaltime));
        var m  = (decimaltime>=0) ? (Math.floor((decimaltime - h) * 60d)  + fc ).abs() : (Math.ceil((decimaltime - h) * 60d) - fc).abs();
        //var s  = (decimaltime>=0) ? ((Math.floor((((decimaltime-h)*60d).abs() - m ) * 60d))).abs() : ((Math.ceil((((decimaltime-h)*60d).abs() - m ) * 60d))).abs();;
        var s  = ((((decimaltime-h)*60d).abs() - m ) * 60d).abs() ;
        //var s10 = s - Math.floor(s  + fc);
        //System.println(s + " " + s10);
        //h=str(h);
        //m=str(m);
        //s=str(s);
        //if len(h)==1: h = '0' + h;
        //if len(m)==1: m = '0' + m;
        //if len(s)==1: s = '0' + s;
        var res = h.format("%02d") + ':'+ m.format("%02d") + ':'+ s.format("%02.2f");// + "." + (Math.round(s10*10)).format("%02.d");
        return res;
    }


    function decimal2arcs(num) {
        /*
        Convert Demical view to Degrees and minutes.
        
        Args:
            num (float): degrees to be converted.
            
        Returns:
            str: one string representation in degrees and minutes format.
            
        */
        //    return(str(int(num))+u"\u00b0 "+str(round(abs(num - int(num))*60,2))+"'")

        var deg = (num>=0) ? Math.floor(num) : Math.ceil(num);

        var mins = ((num - deg) * 60.0d).abs();
        //return(str(int(num))+"° "+str(round(abs(num - int(num))*60,2))+"'")
        return deg.format("%d") + "° " + mins.format("%0.2f") + "'";
    }



    //function degrees2hours(degrees) {
    //    /*
    //    Convert degrees to string representation of hours, minutes and seconds.
    //    
    //    Args:
    //        degrees (float): degrees to be converted.
    //        
    //    Returns:
    //        str: one string representation in hours, minutes and seconds format.
    //        
    //    */   
    //    h=degrees//15;
    //    r=(degrees%15)*4;
    //    m=int(r);
    //    s=int((r-m)*60);
    //    return (str(h)+'h '+str(m)+'m '+str(s)+'s');
    //}


    function decimal2hms(degrees) {
        /*
        Convert degrees to string representation of hours, minutes and seconds.
        
        Args:
            degrees (float): degrees to be converted.
            
        Returns:
            str: one string representation in hours, minutes and seconds format.
            
        */   
        var prefix = (degrees < 0) ? "-" : "";
        degrees = degrees.abs();

        var h = Math.floor(degrees/15d + fc).toNumber();
        var m = Math.floor((degrees/15d - h) * 60d + fc).toNumber();
        var s = (((degrees/15d-h)*60d - m ) * 60d).toNumber();

        //System.println(h + " " + m  + " " + s);
        
        var res = prefix + h.format("%02d") + "h " + m.format("%02d") + "m "+ s.format("%02d") +"s";
        return res;

    }
}